/* Class to put the table in "width auto" mode: in this way, if all visible columns have a fixed size,
     * the table automatically has a size equal to the sum of the sizes all columns.
     * Additionally it must remove the min width specification to allow a correct sizing.
     * [column-width-related][mandatory]
     * 
     * The property "table-layout" is mandatory to override the default algorithm by which the browsers renders the tables.
     * This algorithm simply tries to adjust the table cell width to fit its content as best as it can.
     * But this is in contrast with having specified widths for the cells.
     * However, Firefox has a rendering error when "table-layout: fixed" and "width: -moz-fit-content;" are set on a table
     * at the same time and there is even one column with no specified size: that column automatically gets the maximum width
     * the browser itself can withstand. In contrast with V8 browsers, where the table is rendered correctly.
     * Vice versa, by not using the "table-layout: fixed", Firefox renders correctly the table while V8 doesn't.
     * In addition, there are also other size cases where there are similar rendering errors.
     * Currently the most convenient solution that I've found is to manually set the desired max and min widths on all the
     * cells of single column, if that column must have a given size.
     *
     * NOTES:
     * [1] - If we do not place these properties in the correct order, on Firefox we will find that the
     *     tables takes the whole available place, therefore fixed sizes are not respected.
     * [2] - On the contrary, without using these properties, V8 browsers will not understand that the table must have
     *     the width equal to the sum of all columns widths.
     * [3] - Mandatory for width property to take effect.
     */

/**
* @prop --kup-datatable-background-color: Sets background color of the component.
* @prop --kup-datatable-border: Sets border of the component.
* @prop --kup-datatable-color: Sets text color of the component.
* @prop --kup-datatable-font-family: Sets font family of the component.
* @prop --kup-datatable-font-family-monospace: Sets monospace font family of the component (for numbers).
* @prop --kup-datatable-font-size: Sets font size of the component.
* @prop --kup-datatable-th-border: Sets border of the th elements.
* @prop --kup-datatable-th-resize-handle-width: Sets the width of the handle used to resize columns.
*/

:host {
  --kup_datatable_background_color: var(
    --kup-datatable-background-color,
    var(--kup-background-color)
  );
  --kup_datatable_border: var(
    --kup-datatable-border,
    1px solid var(--kup-border-color)
  );
  --kup_datatable_color: var(--kup-datatable-color, var(--kup-text-color));
  --kup_datatable_font_family: var(
    --kup-datatable-font-family,
    var(--kup-font-family)
  );
  --kup_datatable_font_family_monospace: var(
    --kup-datatable-font-family-monospace,
    var(--kup-font-family-monospace)
  );
  --kup_datatable_font_size: var(
    --kup-datatable-font-size,
    var(--kup-font-size)
  );
  --kup_datatable_th_border: var(
    --kup-datatable-th-border,
    1px solid var(--kup-border-color)
  );
  --kup_datatable_th_resize_handle_width: var(
    --kup-datatable-th-resize-handle-width,
    3px
  );

  display: block;
  font-family: var(--kup_datatable_font_family);
  font-size: var(--kup_datatable_font_size);
  position: relative;
}

:host([kup-toolbar]) {
  .settings-trigger {
    height: 12px;
  }
  .customize-panel {
    visibility: visible;
  }
}

table {
  // [TFixed-1] - This is needed to avoid problems with fixed rows/columns
  background-color: var(--kup_datatable_background_color);
  border-spacing: 0; // [TFixed-1]
  border-collapse: separate; // [TFixed-1]
  color: var(--kup_datatable_color);
  min-width: intrinsic; /* Safari/WebKit uses a non-standard name */
  min-width: -moz-max-content; /* Firefox/Gecko */
  min-width: -webkit-max-content; /* Chrome */
  text-align: left;
  width: 100%;

  &.auto-width {
    min-width: auto; // [mandatory] See [1] [2]
    width: 0; // [mandatory] See [1] [2]
  }

  // By default, since border has been moved to the cells themselves, the first and last cell must always simulate the table border
  > tbody > tr {
    &.focus,
    &[#{$kup-dd-drag-over}] {
      td {
        &:first-of-type {
          box-shadow: inset 4px 0px 0px 0px var(--kup-secondary-color);
        }
      }
    }

    > td {
      &:first-of-type,
      &.placeholder ~ td:not(.placeholder) {
        border-left: var(--kup_datatable_border);
      }

      &:last-of-type {
        border-right: var(--kup_datatable_border);
      }
    }

    // ALso the last row must always have the border bottom property
    &:last-of-type > td {
      border-bottom: var(--kup_datatable_border);
    }
  }

  // When table header is not visible the table needs a border to,
  // so the first row gets added a border
  &.border-top > tbody > tr:first-of-type > td {
    border-top: var(--kup_datatable_border);
  }

  // If row separation is specified, all rows gets a border bottom
  &.row-separation > tbody > tr > td {
    border-bottom: var(--kup_datatable_border);
  }

  // If column separation is specified, all rows gets a border bottom
  &.column-separation > tbody > tr > td {
    border-right: var(--kup_datatable_border);
  }

  &.noGrid {
    &,
    td {
      border: none;
    }
  }

  tfoot {
    td {
      border-bottom: var(--kup_datatable_border);
      border-right: var(--kup_datatable_border);
      box-sizing: border-box;
      height: 36px;
      text-align: right;
      font-weight: bold;
      padding: 0.5em 0.3125em;
      &:hover {
        background-color: var(--kup_datatable_background_color);
      }
      &:first-of-type {
        border-left: var(--kup_datatable_border);
      }
    }
  }
}

#global-filter {
  margin: 0.5em 0px;
  min-width: 140px;
  width: 100%;
}

.#{$kup-icon}:not(.f-image--wrapper) {
  background-color: var(--kup-title-color);
  margin: 0 0.25em;
  height: 1.25em;
  width: 1.25em;

  &.#{$kup-icon-ascending},
  &.#{$kup-icon-descending},
  &.#{$kup-icon-key},
  &.#{$kup-icon-filter-remove} {
    height: auto;
  }

  &.#{$kup-icon-collapsed},
  &.#{$kup-icon-expanded} {
    float: left;
  }

  &.#{$kup-icon-filter-remove},
  &.#{$kup-icon-key} {
    margin: 0 0.25em;
  }

  &.obj-icon {
    cursor: var(--kup-obj-cursor);
    display: block;
    background-color: rgba(var(--kup-text-color-rgb), 0.375);
    margin: auto 0.5em auto 0;

    :host([force-one-line]) & {
      display: inline-block;
      margin: 0 0.5em 0 0;
      vertical-align: -0.275em;
    }

    .number & {
      display: inline-block;
      vertical-align: text-bottom;
    }
  }
}

.below-wrapper {
  backface-visibility: hidden;
  height: auto;
  overflow: auto;

  &.custom-size {
    overflow: unset;
  }
  &:not(.custom-size) {
    overflow-x: auto;
  }
}

.density- {
  &dense {
    tbody > tr > td:not(.is-graphic) {
      padding-top: 0.2em;
      padding-bottom: 0.2em;
    }
    tbody > tr.group > td {
      padding-top: 0.25em;
      padding-bottom: 0.25em;
    }
  }

  &wide {
    tbody > tr > td:not(.is-graphic) {
      padding-top: 1em;
      padding-bottom: 1em;
    }
    tbody > tr.group > td {
      padding-top: 0.75em;
      padding-bottom: 0.75em;
    }
  }
}

.fontsize- {
  &small {
    font-size: calc(var(--kup_datatable_font_size) * 0.75);
    transition: font-size 0.1s;

    .group-cell-content {
      > span {
        &:before {
          font-size: calc(var(--kup_datatable_font_size) * 1) !important;
        }
      }
    }
  }

  &big {
    font-size: calc(var(--kup_datatable_font_size) * 1.25);
    transition: font-size 0.1s;

    .group-cell-content {
      > span {
        &:before {
          font-size: calc(var(--kup_datatable_font_size) * 1.5) !important;
        }
      }
    }
  }
}

th {
  background-color: var(--kup-title-background-color);
  border: var(--kup_datatable_th_border);
  border-left: 0 none; // Important: only the first cell must have the border left, otherwise the th will have a visual 2px border between each other.
  border-bottom-width: 2px;
  box-sizing: border-box;
  top: 0;
  touch-action: none;
  transition: background-color 0.25s ease;
  user-select: none;
  // The first cell must have border left to simulate table border.
  &:first-of-type {
    border-left: var(--kup_datatable_th_border);
  }
}

.header-cell {
  &__content {
    color: var(--kup-title-color);
    display: flex;
    justify-content: space-between;
    padding: 0.5em 0.3125em;
    text-overflow: ellipsis;
    white-space: nowrap;

    .header-cell--centered & {
      justify-content: center;
    }

    .header-cell--is-number & {
      justify-content: flex-end;
    }
  }

  &__title {
    overflow: hidden;
    text-overflow: ellipsis;
    user-select: none;
  }

  &__icons {
    display: flex;
  }

  &__drag-handler {
    background: rgba(var(--kup-title-color-rgb), 0.25);
    height: 100%;
    position: absolute;
    right: 0;
    top: 0;
    touch-action: none;
    user-select: none;
    width: var(--kup_datatable_th_resize_handle_width);

    &:hover {
      background: rgba(var(--kup-title-color-rgb), 0.5);
    }
  }

  &--sortable {
    cursor: pointer;
  }

  &--is-icon {
    width: 30px;
  }
}

tbody {
  cursor: auto;

  tr {
    kup-button {
      max-width: max-content;
    }

    &.selected {
      td {
        background-color: rgba(var(--kup-primary-color-rgb), 0.175);
      }
    }

    &.hover:not(.group):not(.selected) {
      td {
        color: var(--kup-hover-color);
        background-color: var(--kup-hover-background-color);
      }
    }

    // grouping
    &.group {
      background: var(--kup-title-background-color);
      border-top: var(--kup_datatable_border);
      color: var(--kup-title-color);
      font-weight: bold;
      cursor: pointer;

      &.group-label {
        border-bottom: none;
      }

      &.group-total {
        border-top: none;
        line-height: 0.5em;
      }

      > td {
        padding: 0.5em 0;

        .group-cell-content {
          .indent {
            float: left;
            margin-left: 0.25em;
          }
          > span {
            display: inline-flex;
            outline: none;
            margin-left: 0.25em;
          }
        }

        &.total {
          text-align: right;
          padding: 0.5em 0.3125em;

          &.negative-number {
            color: var(--kup-danger-color);
          }
        }
      }
    }

    > td {
      box-sizing: border-box;
      overflow: hidden;
      padding: 0.5em 0.3125em;
      word-break: break-all;
      word-wrap: break-word;
      transition: box-shadow 0.1s;

      &.number {
        .cell-content {
          font-family: var(--kup_datatable_font_family_monospace);
          justify-content: flex-end;
        }
      }

      .row-expander {
        margin-right: 0.5em;
      }

      .indent {
        display: inline-block;
        height: 1em;
        width: 2em;
      }

      .row-action {
        margin-right: 0.2em;
      }

      // The container of the effective cell content
      .cell-content {
        display: flex;

        &.has-padding {
          box-sizing: border-box;
          padding: 1em;
        }

        // When there is the necessity to hide long text
        :host([force-one-line]) & {
          display: inline-block; // [column-width-related][mandatory][3]
          max-width: 100%;
          overflow: hidden;
          text-overflow: ellipsis;
          vertical-align: middle;
          white-space: nowrap;
          width: 100%;

          &.is-centered {
            display: flex;
          }

          &.number-cell {
            text-align: right;
          }
        }

        &.is-tooltip {
          position: relative;
        }

        &.is-vertical,
        :host([force-one-line]) &.is-vertical {
          display: block;
          width: auto;
          margin: auto;
          min-height: 16px;
          min-width: 16px;
          & > * {
            margin: auto;
          }
        }

        &.negative-number {
          color: var(--kup-danger-color);
        }
      }

      &.is-graphic {
        padding: 0 1px;
      }

      & .indent ~ kup-image,
      & .indent ~ kup-button {
        margin: 0;
        vertical-align: middle;
      }
    }
  }
}

tr {
  kup-checkbox,
  kup-image {
    display: flex;
  }

  kup-button {
    display: inline-block;
  }

  kup-button-list {
    display: flex;
    margin: auto;
  }

  kup-progress-bar {
    display: block;
  }

  & .indent ~ kup-image {
    display: inline-block;
  }

  .indent {
    & ~ kup-button,
    & ~ kup-checkbox {
      display: inline-block;
    }
  }

  [row-select-cell] {
    min-height: 40px;
  }

  td[row-action-cell] {
    width: calc(3em * var(--kup_datatable_row_actions));
    & .f-image--wrapper {
      cursor: pointer;
      margin-left: 0.75em;
      display: inline-block;
      opacity: 1;
      transition: 0.25s ease-in-out;
      &:hover {
        opacity: 0.5;
      }
    }
  }
}

.above-wrapper {
  display: flex;
  width: 100%;
}

.bar-cell-content {
  overflow: hidden;
  margin: auto;
  position: relative;
  transition: color 0.2s ease;
  height: 100%;
  width: 100%;
}

//Temporary removal of borders inside cells: they should be applied only to <td> elements
//TODO: Improve styling interface with data-table inside client apps
tbody td > * {
  border: none !important;
}

.#{$kup-icon}.overlay-action {
  display: none;
  position: absolute;
  top: 0.5em;
  left: calc(50% - 0.625em);
}

th:hover .#{$kup-icon}.overlay-action {
  display: block;
}

thead {
  th {
    /** it doesn't work with fixed columns... !!! */
    position: relative;
  }
}

th.obj:hover span:not(.overlay-action) {
  opacity: 0.5;
}

.hidden {
  span {
    color: transparent;
    position: relative;
    text-overflow: ellipsis;
    transition: color 200ms;
    &:hover {
      color: var(--kup_datatable_color);
    }
  }
}

.totals-value {
  font-weight: bold;
}

.settings-trigger {
  cursor: pointer;
  display: block;
  width: 32px;
  height: 0;
  border-top-left-radius: 25px 30px;
  border-top-right-radius: 25px 30px;
  background-color: var(--kup-border-color);
  transition: height 0.25s;
  &.toggled {
    background-color: var(--kup-primary-color);
    .f-image__icon {
      background: var(--kup-text-on-primary-color) !important;
    }
  }
}

.customize-panel {
  visibility: hidden;
  background: var(--kup_datatable_background_color);
  box-shadow: var(--kup-box-shadow);
  min-width: 200px;
  width: fit-content;
  transition: height 0.25s;
  kup-switch {
    text-align: center;
  }
}

.customize-element {
  padding: 0 1em 1em 1em;
}

.customize-element:nth-child(1) {
  padding-top: 1em;
}

.f-image--wrapper.cell-info {
  margin: auto 0.5em auto 0.25em;

  :host([force-one-line]) & {
    display: inline-block;
    vertical-align: sub;
  }
}

[kup-dialog] {
  animation: fade-in 0.25s ease-out;
  background-color: var(--kup_datatable_background_color);
  margin: 0;
  position: fixed;
  transition: none;
  -ms-touch-action: none;
  touch-action: none;
  will-change: transform;

  &.kup-resizable {
    border: 3px outset var(--kup-title-background-color);
  }
}

.kup-menu {
  animation: fade-in 0.25s ease-out;
  background-color: var(--kup-background-color);
  box-shadow: var(--kup-box-shadow);
  color: var(--kup-text-color);
  display: none;
  max-height: 33vh;
  overflow: auto;
  position: relative;
  transform: none;
  transform-origin: unset;
  transition: height 0.2s;
  will-change: unset;

  &.visible {
    display: block;
  }
}

.#{$kup-icon}.#{$kup-icon-ascending} {
  -webkit-mask: var(--kup-ascending-icon);
  mask: var(--kup-ascending-icon);
}

.#{$kup-icon}.#{$kup-icon-collapsed} {
  -webkit-mask: var(--kup-collapsed-icon);
  mask: var(--kup-collapsed-icon);
}

.#{$kup-icon}.#{$kup-icon-descending} {
  -webkit-mask: var(--kup-descending-icon);
  mask: var(--kup-descending-icon);
}

.#{$kup-icon}.#{$kup-icon-expanded} {
  -webkit-mask: var(--kup-expanded-icon);
  mask: var(--kup-expanded-icon);
}

.#{$kup-icon}.#{$kup-icon-filter-remove} {
  -webkit-mask: var(--kup-filter-remove-icon);
  mask: var(--kup-filter-remove-icon);
}

.#{$kup-icon}.#{$kup-icon-key} {
  -webkit-mask: var(--kup-key-icon);
  mask: var(--kup-key-icon);
}

@keyframes fade-in {
  0% {
    display: none;
    opacity: 0;
  }

  1% {
    display: block;
    opacity: 0;
  }

  100% {
    display: block;
    opacity: 1;
  }
}
